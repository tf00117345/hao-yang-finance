// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hao_yang_finance_api.Data;

#nullable disable

namespace hao_yang_finance_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251026130424_AddDriverProfitShareAndTonnage")]
    partial class AddDriverProfitShareAndTonnage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("hao_yang_finance_api.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_person");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TaxId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tax_id");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("company");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.CompanyPhone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("company_phone");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<decimal>("ProfitShareRatio")
                        .HasColumnType("numeric")
                        .HasColumnName("profit_share_ratio");

                    b.Property<decimal?>("TruckTonnage")
                        .HasColumnType("numeric")
                        .HasColumnName("truck_tonnage");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("driver");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.DriverSettlement", b =>
                {
                    b.Property<long>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SettlementId"));

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("CalculationVersion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Income")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("IncomeCash")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ProfitShareRatio")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TargetMonth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("TotalCompanyExpense")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalPersonalExpense")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SettlementId");

                    b.HasIndex("DriverId", "TargetMonth")
                        .IsUnique();

                    b.ToTable("driver_settlement");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Expense", b =>
                {
                    b.Property<long>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ExpenseId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExpenseTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("SettlementId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("SettlementId");

                    b.ToTable("expense");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.ExpenseType", b =>
                {
                    b.Property<int>("ExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExpenseTypeId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DefaultAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ExpenseTypeId");

                    b.ToTable("expense_type");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.ExtraExpense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<string>("Item")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("item");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("WaybillId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("waybill_id");

                    b.HasKey("Id");

                    b.HasIndex("WaybillId");

                    b.ToTable("extra_expense");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date");

                    b.Property<bool>("ExtraExpensesIncludeTax")
                        .HasColumnType("boolean")
                        .HasColumnName("extra_expenses_include_tax");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_number");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PaidAt")
                        .HasColumnType("text")
                        .HasColumnName("paid_at");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentNote")
                        .HasColumnType("text")
                        .HasColumnName("payment_note");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric")
                        .HasColumnName("tax");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_rate");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("invoice");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.InvoiceExtraExpense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("ExtraExpenseId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extra_expense_id");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invoice_id");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_selected");

                    b.HasKey("Id");

                    b.HasIndex("ExtraExpenseId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("invoice_extra_expense");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.InvoiceWaybill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invoice_id");

                    b.Property<string>("WaybillId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("waybill_id");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("WaybillId");

                    b.ToTable("invoice_waybill");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.LoadingLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("from_location");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_order");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("to_location");

                    b.Property<string>("WaybillId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("waybill_id");

                    b.HasKey("Id");

                    b.HasIndex("WaybillId");

                    b.ToTable("loading_location");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastLoginAt")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("RefreshTokenExpiryTime")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Waybill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_at");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("driver_id");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("text")
                        .HasColumnName("invoice_id");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("item");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("plate_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("Tonnage")
                        .HasColumnType("numeric")
                        .HasColumnName("tonnage");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_at");

                    b.Property<string>("WaybillNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("waybill_number");

                    b.Property<string>("WorkingTimeEnd")
                        .HasColumnType("text")
                        .HasColumnName("working_time_end");

                    b.Property<string>("WorkingTimeStart")
                        .HasColumnType("text")
                        .HasColumnName("working_time_start");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("waybill");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.CompanyPhone", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.Company", "Company")
                        .WithMany("Phones")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.DriverSettlement", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.Driver", "Driver")
                        .WithMany("Settlements")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Expense", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("hao_yang_finance_api.Models.DriverSettlement", "Settlement")
                        .WithMany("Expenses")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseType");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.ExtraExpense", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.Waybill", "Waybill")
                        .WithMany("ExtraExpenses")
                        .HasForeignKey("WaybillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waybill");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Invoice", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.InvoiceExtraExpense", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.ExtraExpense", "ExtraExpense")
                        .WithMany()
                        .HasForeignKey("ExtraExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hao_yang_finance_api.Models.Invoice", "Invoice")
                        .WithMany("InvoiceExtraExpenses")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraExpense");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.InvoiceWaybill", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.Invoice", "Invoice")
                        .WithMany("InvoiceWaybills")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hao_yang_finance_api.Models.Waybill", "Waybill")
                        .WithMany()
                        .HasForeignKey("WaybillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Waybill");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.LoadingLocation", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.Waybill", "Waybill")
                        .WithMany("LoadingLocations")
                        .HasForeignKey("WaybillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waybill");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Waybill", b =>
                {
                    b.HasOne("hao_yang_finance_api.Models.Company", "Company")
                        .WithMany("Waybills")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hao_yang_finance_api.Models.Driver", "Driver")
                        .WithMany("Waybills")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hao_yang_finance_api.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");

                    b.Navigation("Driver");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Company", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Phones");

                    b.Navigation("Waybills");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Driver", b =>
                {
                    b.Navigation("Settlements");

                    b.Navigation("Waybills");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.DriverSettlement", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceExtraExpenses");

                    b.Navigation("InvoiceWaybills");
                });

            modelBuilder.Entity("hao_yang_finance_api.Models.Waybill", b =>
                {
                    b.Navigation("ExtraExpenses");

                    b.Navigation("LoadingLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
